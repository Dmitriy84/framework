import org.gradle.accessors.dm.LibrariesForLibs
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent.*
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import java.time.LocalDateTime

@Suppress("DSL_SCOPE_VIOLATION")
plugins {
    kotlin("jvm")
//    `kotlin-dsl`
    `java-library`
}

val Project.libs: VersionCatalog
    get() = extensions.getByType(VersionCatalogsExtension::class.java).named("libs")

allprojects {
    tasks {
        withType<KotlinCompile> {
            kotlinOptions {
                freeCompilerArgs = listOf("-Xjsr305=strict", "-Xcontext-receivers")
//                jvmTarget = libs.versions.jvm.get()
//                libs.versionAliases.fin
                jvmTarget = "19"
//                jvmTarget = the<LibrariesForLibs>().versions.jvm.get()
            }
            println("KotlinCompile!!!!!")
        }

        withType<JavaCompile> {
            javaCompiler.set(
                project.javaToolchains.compilerFor {
                    languageVersion.set(JavaLanguageVersion.of(19))
                }
            )
        }

        test {
            doFirst {
                infix fun String.setProperty(key: String) {
                    systemProperty(key, this)
                    println("Set property ---> $key='$this'")
                }

                "QASE_RUN_NAME".also {
                    if (!providers.systemProperty(it).isPresent || !providers.gradleProperty(it).isPresent) {
                        "Autotest run: ${LocalDateTime.now()}" setProperty it
                        "Test run automatically generated by https://gitlab.com/tzero-git/primary-issuance-be" setProperty "QASE_RUN_DESCRIPTION"
                    }
                }

                arrayOf(
                    "QASE_API_TOKEN",
                    "QASE_ENABLE",
                    "QASE_PROJECT_CODE",
                    "QASE_RUN_ID",
                    "QASE_RUN_NAME",
                    "QASE_RUN_AUTOCOMPLETE",
                    "QASE_RUN_DESCRIPTION",
                ).forEach { key ->
                    (providers.systemProperty(key).orNull
                        ?: providers.gradleProperty(key).orNull)
                        ?.also { value -> value setProperty key }
                }
            }

            useJUnitPlatform()
            testLogging {
                events(PASSED, SKIPPED, FAILED)
                exceptionFormat = TestExceptionFormat.FULL
                showCauses = true
                showExceptions = true
                showStackTraces = true
            }
        }
    }
}
//
//dependencies {
//    implementation("org.jetbrains.kotlin:kotlin-gradle-plugin:1.8.20")
//}


println("COOL!!!!!")